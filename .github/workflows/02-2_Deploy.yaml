name: 02-2 - Deploy Job

on:
  workflow_call

env:
  REGISTRY: ghcr.io
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE_NAME_LOWER
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Database Backup (Optional)
        uses: appleboy/ssh-action@v1.0.3
        continue-on-error: true
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            # Backup seulement si la DB existe déjà
            if docker ps | grep cesizen_database > /dev/null; then
              BACKUP_FILE="cesizen_backup_$(date +%Y%m%d_%H%M%S).bak"
              docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd \
                -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" \
                -Q "BACKUP DATABASE [CESIZenDB] TO DISK = '/var/opt/mssql/data/$BACKUP_FILE'" || echo "⚠️ Backup failed - continuing"
              echo "✅ Backup created: $BACKUP_FILE"
            else
              echo "ℹ️ No existing database to backup"
            fi

      - name: Update Compose File
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          source: "./docker-compose.yaml"
          target: "."

      - name: Simple Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            echo "🚀 Starting CESIZen deployment..."
            
            # Login to Docker Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Set environment variables
            export GITHUB_REPOSITORY="${{ env.IMAGE_NAME_LOWER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            
            NEW_IMAGE="ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}"
            echo "📥 Pulling new image: $NEW_IMAGE"
            docker pull $NEW_IMAGE
            
            # Créer le réseau s'il n'existe pas
            docker network create cesizen-network --driver bridge 2>/dev/null || echo "ℹ️ Network already exists"
            
            # 🔧 DÉMARRAGE/VÉRIFICATION BASE DE DONNÉES
            echo "🔍 Checking database status..."
            if ! docker ps | grep cesizen_database > /dev/null; then
              echo "🚀 Starting fresh database..."
              
              # Nettoyer tout ancien conteneur DB
              docker stop cesizen_database 2>/dev/null || true
              docker rm cesizen_database 2>/dev/null || true
              
              # Démarrer nouveau conteneur DB
              docker run -d \
                --name cesizen_database \
                --network cesizen-network \
                -p 1433:1433 \
                -e SA_PASSWORD="${{ secrets.DB_PASSWORD }}" \
                -e ACCEPT_EULA=Y \
                -e MSSQL_PID=Express \
                -v cesizen_sqldata:/var/opt/mssql/data \
                mcr.microsoft.com/mssql/server:2022-latest
              
              echo "⏳ Waiting for database to start..."
              sleep 60
              
              # Vérifier que SQL Server est prêt
              for i in {1..15}; do
                if docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd \
                  -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" -Q "SELECT 1" > /dev/null 2>&1; then
                  echo "✅ Database ready after $i attempts"
                  break
                elif [ $i -eq 15 ]; then
                  echo "❌ Database failed to start after 15 attempts"
                  echo "📋 Database logs:"
                  docker logs cesizen_database --tail 30
                  exit 1
                else
                  echo "⏳ Attempt $i/15 - waiting 10s..."
                  sleep 10
                fi
              done
              
            else
              echo "✅ Database already running"
              
              # Test de santé de la DB existante
              if ! docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd \
                -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" -Q "SELECT 1" > /dev/null 2>&1; then
                echo "⚠️ Database not responding, restarting..."
                docker restart cesizen_database
                sleep 30
              fi
            fi
            
            # 🔧 DÉPLOIEMENT APPLICATION
            echo "🚀 Deploying application..."
            
            # Arrêter ancien conteneur app
            docker stop cesizen_app 2>/dev/null || true
            docker rm cesizen_app 2>/dev/null || true
            
            # Démarrer nouveau conteneur app
            echo "🟢 Starting new application container..."
            docker run -d \
              --name cesizen_app \
              --network cesizen-network \
              -p 8080:8080 \
              -e ASPNETCORE_ENVIRONMENT=Production \
              -e "ConnectionStrings__DefaultConnection=Server=cesizen_database;Database=CESIZenDB;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;Connection Timeout=30;" \
              $NEW_IMAGE
            
            echo "⏳ Waiting for application to start..."
            sleep 45
            
            # Vérifier que l'app fonctionne
            echo "🩺 Testing application..."
            for i in {1..10}; do
              if curl -f -s http://localhost:8080/ > /dev/null; then
                echo "✅ Application responding after $i attempts"
                break
              elif [ $i -eq 10 ]; then
                echo "❌ Application not responding after 10 attempts"
                echo "📋 Application logs:"
                docker logs cesizen_app --tail 50
                echo "📋 Database logs:"
                docker logs cesizen_database --tail 20
                exit 1
              else
                echo "⏳ App test attempt $i/10 - waiting 15s..."
                sleep 15
              fi
            done
            
            # Test de performance rapide
            RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:8080/ 2>/dev/null || echo "999")
            echo "⚡ Response time: ${RESPONSE_TIME}s"
            
            # Nettoyer les anciennes images
            docker image prune -f 2>/dev/null || true
            
            echo "🎉 Deployment completed successfully!"
            echo "📊 Final status:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

      - name: Final Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            echo "🧪 Final health check..."
            
            # Test complet
            if curl -f http://localhost:8080/ > /dev/null 2>&1; then
              echo "✅ Homepage: OK"
            else
              echo "❌ Homepage: FAILED"
            fi
            
            if curl -f http://localhost:8080/Home/Privacy > /dev/null 2>&1; then
              echo "✅ Privacy page: OK"
            else
              echo "❌ Privacy page: FAILED"
            fi
            
            # Statut des conteneurs
            echo "📊 Container status:"
            docker ps --format "table {{.Names}}\t{{.Status}}"
            
            echo "🏁 Deployment health check completed"

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 CESIZen Simple Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: Simple Replacement" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY