name: 02 - Deploy (Direct)
name: 02 - Deploy (Direct)

on: 
  push:
    branches:
      - main
on: 
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Security_Check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run dependency audit
        run: |
          echo "üîç Checking for vulnerable packages..."
          dotnet list package --vulnerable --include-transitive || echo "‚ÑπÔ∏è No vulnerable packages found"

  Dockerbuild:
    needs: [Security_Check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Registry Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Downcase IMAGE Name
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Build and Push CESIZen App
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}

      - name: Docker Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  Deploy:
    needs: [Dockerbuild]
  Security_Check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run dependency audit
        run: |
          echo "üîç Checking for vulnerable packages..."
          dotnet list package --vulnerable --include-transitive || echo "‚ÑπÔ∏è No vulnerable packages found"

  Dockerbuild:
    needs: [Security_Check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Registry Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Downcase IMAGE Name
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Build and Push CESIZen App
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}

      - name: Docker Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  Deploy:
    needs: [Dockerbuild]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE_NAME_LOWER
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Set IMAGE_NAME_LOWER
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Database Backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            # Backup base de donn√©es CESIZen
            BACKUP_FILE="cesizen_backup_$(date +%Y%m%d_%H%M%S).bak"
            docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd \
              -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" \
              -Q "BACKUP DATABASE [CESIZenDB] TO DISK = '/var/opt/mssql/data/$BACKUP_FILE'"
            
            echo "‚úÖ Database backup created: $BACKUP_FILE"

      - name: Update Compose File
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          source: "./docker-compose.yml"
          target: "."

      - name: Canary Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            # Login Docker Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull nouvelle image
            NEW_IMAGE="ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}"
            docker pull $NEW_IMAGE
            
            # D√©ploiement Canary (10% du trafic)
            echo "üöÄ Starting Canary Deployment (10% traffic)"
            
            # Cr√©er conteneur canary
            docker run -d \
              --name cesizen-canary \
              --network cesizen-network \
              -p 8081:8080 \
              -e ASPNETCORE_ENVIRONMENT=Production \
              -e "ConnectionStrings__DefaultConnection=Server=cesizen-database;Database=CESIZenDB;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;" \
              $NEW_IMAGE

            # Monitoring pendant 5 minutes
            echo "üìä Monitoring canary for 5 minutes..."
            
            for i in {1..5}; do
              # Health check
              if curl -f http://localhost:8081/health > /dev/null 2>&1; then
                echo "‚úÖ Minute $i: Canary healthy"
              else
                echo "‚ùå Minute $i: Canary unhealthy - Rolling back"
                docker stop cesizen-canary && docker rm cesizen-canary
                exit 1
              fi
              
              # Test de performance
              RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:8081/)
              echo "‚ö° Response time: ${RESPONSE_TIME}s"
              
              # V√©rifier la performance (< 2 secondes)
              if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
                echo "‚ö†Ô∏è Response time is slow: ${RESPONSE_TIME}s"
              fi
              
              sleep 60
            done

            # Si succ√®s, d√©ploiement complet
            echo "üéØ Canary successful, proceeding with full deployment"
            
            # Arr√™ter l'ancienne version
            docker stop cesizen-app || true
            docker rm cesizen-app || true
            
            # D√©ployer la nouvelle version
            docker run -d \
              --name cesizen-app \
              --network cesizen-network \
              -p 8080:8080 \
              -e ASPNETCORE_ENVIRONMENT=Production \
              -e "ConnectionStrings__DefaultConnection=Server=cesizen-database;Database=CESIZenDB;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;" \
              $NEW_IMAGE
            
            # Nettoyer le conteneur canary
            docker stop cesizen-canary && docker rm cesizen-canary
            
            # V√©rification finale
            echo "üîç Final health check..."
            sleep 10
            
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Deployment failed!"
              exit 1
            fi
            
            # Nettoyer les anciennes images
            docker image prune -f
            
            echo "üöÄ CESIZen deployment completed successfully!"

      - name: Post-Deployment Tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            echo "üß™ Running post-deployment tests..."
            
            # Test de base
            curl -f http://localhost:8080/ || (echo "‚ùå Homepage test failed" && exit 1)
            
            # Test des endpoints sp√©cifiques
            curl -f http://localhost:8080/Home/Privacy || (echo "‚ùå Privacy page test failed" && exit 1)
            
            # Test de performance
            RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:8080/)
            echo "‚ö° Production response time: ${RESPONSE_TIME}s"
            
            if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )); then
              echo "‚ö†Ô∏è Production response time is slow: ${RESPONSE_TIME}s"
            else
              echo "‚úÖ Performance test passed"
            fi
            
            echo "‚úÖ All post-deployment tests passed!"

      - name: Deployment Summary
        if: always()
        run: |
          echo "## üöÄ CESIZen Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: Canary Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY