name: 02-2 - Deploy Job Enhanced

on:
  workflow_call

env:
  REGISTRY: ghcr.io
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE_NAME_LOWER
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      # ✨ AMÉLIORATION : Vérification des ressources AVANT déploiement
      - name: System Resources Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            echo "🔍 Pre-deployment system check..."
            echo "Memory: $(free -h | grep Mem)"
            echo "Disk: $(df -h / | tail -1)"
            echo "CPU: $(nproc) cores"
            
            # Vérifier que nous avons assez de mémoire libre (minimum 1GB)
            FREE_MEM=$(free -m | awk 'NR==2{printf "%.0f", $7}')
            if [ "$FREE_MEM" -lt 1024 ]; then
              echo "⚠️ Warning: Low memory ($FREE_MEM MB free). Cleaning up..."
              docker system prune -f --volumes || true
              docker container prune -f || true
              docker image prune -a -f || true
            fi

      - name: Database Backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            # ✨ AMÉLIORATION : Backup avec retention automatique
            if docker ps | grep cesizen_database > /dev/null; then
              BACKUP_FILE="cesizen_backup_$(date +%Y%m%d_%H%M%S).bak"
              echo "📦 Creating database backup: $BACKUP_FILE"
              
              docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd \
                -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" \
                -Q "BACKUP DATABASE [CESIZenDB] TO DISK = '/var/opt/mssql/data/$BACKUP_FILE'" || echo "⚠️ Database backup failed"
              
              # Garder seulement les 7 dernières sauvegardes
              docker exec cesizen_database bash -c "
                cd /var/opt/mssql/data && 
                ls -1t cesizen_backup_*.bak | tail -n +8 | xargs rm -f
              " || echo "ℹ️ No old backups to clean"
              
              echo "✅ Database backup completed"
            else
              echo "ℹ️ No existing database to backup"
            fi

      - name: Update Compose File
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          source: "./docker-compose.yml"
          target: "."

      # ✨ AMÉLIORATION : Déploiement Blue-Green + Canary optimisé pour 4GB
      - name: Blue-Green Canary Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            # Login Docker Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Export environment variables
            export GITHUB_REPOSITORY="${{ env.IMAGE_NAME_LOWER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            
            NEW_IMAGE="ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}"
            echo "📥 Pulling new image: $NEW_IMAGE"
            docker pull $NEW_IMAGE
            
            # Créer le réseau si nécessaire
            docker network create cesizen-network --driver bridge || echo "ℹ️ Network exists"
            
            # ✨ Gestion intelligente de la base de données
            echo "🔍 Database management..."
            if ! docker ps | grep cesizen_database > /dev/null; then
              echo "🚀 Starting database with 4GB-optimized settings..."
              docker run -d \
                --name cesizen_database \
                --network cesizen-network \
                -p 1433:1433 \
                -e SA_PASSWORD="${{ secrets.DB_PASSWORD }}" \
                -e ACCEPT_EULA=Y \
                -e MSSQL_PID=Express \
                -e MSSQL_MEMORY_LIMIT_MB=2048 \
                --memory="2.5g" \
                --memory-swap="3g" \
                -v cesizen_sqldata:/var/opt/mssql/data \
                mcr.microsoft.com/mssql/server:2022-latest
              
              echo "⏳ Waiting for database startup (optimized for 4GB)..."
              sleep 90
              
              # Vérification de santé robuste
              for i in {1..20}; do
                if docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd \
                  -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" -Q "SELECT 1" > /dev/null 2>&1; then
                  echo "✅ Database ready after ${i} attempts"
                  break
                elif [ $i -eq 20 ]; then
                  echo "❌ Database failed to start after 20 attempts"
                  docker logs cesizen_database --tail 50
                  exit 1
                else
                  echo "⏳ Database starting... attempt $i/20"
                  sleep 15
                fi
              done
            else
              echo "✅ Database already running"
            fi
            
            # ✨ AMÉLIORATION : Blue-Green deployment avec monitoring
            echo "🚀 Starting Blue-Green Canary Deployment..."
            
            # Arrêter l'ancien canary
            docker stop cesizen-canary 2>/dev/null || true
            docker rm cesizen-canary 2>/dev/null || true
            
            # Créer nouveau canary (Green)
            echo "🟢 Creating GREEN canary instance..."
            docker run -d \
              --name cesizen-canary \
              --network cesizen-network \
              -p 8081:8080 \
              --memory="800m" \
              --memory-swap="1g" \
              -e ASPNETCORE_ENVIRONMENT=Production \
              -e DOTNET_GCServer=1 \
              -e "ConnectionStrings__DefaultConnection=Server=cesizen_database;Database=CESIZenDB;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;Connection Timeout=60;" \
              $NEW_IMAGE
            
            # Monitoring canary avancé
            echo "📊 Advanced canary monitoring..."
            CANARY_HEALTHY=true
            
            for i in {1..6}; do
              echo "🩺 Health check round $i/6..."
              sleep 30
              
              # Vérifier conteneur
              if ! docker ps | grep cesizen-canary > /dev/null; then
                echo "❌ Canary container stopped!"
                docker logs cesizen-canary --tail 20 || echo "No logs available"
                CANARY_HEALTHY=false
                break
              fi
              
              # Test HTTP avec métriques détaillées
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/ || echo "000")
              RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" http://localhost:8081/ || echo "999")
              
              echo "📈 Canary metrics: HTTP=$HTTP_CODE, Time=${RESPONSE_TIME}s"
              
              if [ "$HTTP_CODE" != "200" ] || (( $(echo "$RESPONSE_TIME > 5.0" | bc -l 2>/dev/null || echo "1") )); then
                echo "⚠️ Canary performance issue detected"
                if [ $i -ge 3 ]; then
                  echo "❌ Canary failed after $i attempts"
                  CANARY_HEALTHY=false
                  break
                fi
              else
                echo "✅ Canary healthy - round $i passed"
              fi
            done
            
            if [ "$CANARY_HEALTHY" = "true" ]; then
              echo "🎉 Canary validation successful! Promoting to production..."
              
              # Arrêter ancien prod (Blue)
              docker stop cesizen_app 2>/dev/null || true
              docker rm cesizen_app 2>/dev/null || true
              
              # Promouvoir canary vers prod (Green -> Blue)
              docker stop cesizen-canary
              docker rename cesizen-canary cesizen_app
              docker start cesizen_app
              
              # Changer le port mapping
              docker stop cesizen_app
              docker commit cesizen_app temp_cesizen_image
              docker rm cesizen_app
              
              docker run -d \
                --name cesizen_app \
                --network cesizen-network \
                -p 8080:8080 \
                --memory="800m" \
                --memory-swap="1g" \
                -e ASPNETCORE_ENVIRONMENT=Production \
                -e DOTNET_GCServer=1 \
                -e "ConnectionStrings__DefaultConnection=Server=cesizen_database;Database=CESIZenDB;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;Connection Timeout=60;" \
                temp_cesizen_image
              
              # Cleanup temp image
              docker rmi temp_cesizen_image 2>/dev/null || true
              
              # Cleanup old images
              docker image prune -f
              
              echo "🚀 Blue-Green deployment completed successfully!"
            else
              echo "❌ Canary validation failed! Rolling back..."
              docker stop cesizen-canary 2>/dev/null || true
              docker rm cesizen-canary 2>/dev/null || true
              exit 1
            fi

      # ✨ AMÉLIORATION : Tests post-déploiement exhaustifs
      - name: Comprehensive Post-Deployment Tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            echo "🧪 Running comprehensive post-deployment tests..."
            
            # Test de santé système
            echo "📊 System health after deployment:"
            echo "Memory: $(free -h | grep Mem)"
            echo "Containers: $(docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}')"
            
            # Tests applicatifs
            TESTS_PASSED=0
            TESTS_TOTAL=0
            
            # Test 1: Homepage
            ((TESTS_TOTAL++))
            if curl -f -s http://localhost:8080/ > /dev/null; then
              echo "✅ Test 1/5: Homepage accessible"
              ((TESTS_PASSED++))
            else
              echo "❌ Test 1/5: Homepage failed"
            fi
            
            # Test 2: Privacy page
            ((TESTS_TOTAL++))
            if curl -f -s http://localhost:8080/Home/Privacy > /dev/null; then
              echo "✅ Test 2/5: Privacy page accessible"
              ((TESTS_PASSED++))
            else
              echo "❌ Test 2/5: Privacy page failed"
            fi
            
            # Test 3: Performance
            ((TESTS_TOTAL++))
            RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:8080/ 2>/dev/null || echo "999")
            if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l 2>/dev/null || echo "0") )); then
              echo "✅ Test 3/5: Performance (${RESPONSE_TIME}s < 2s)"
              ((TESTS_PASSED++))
            else
              echo "❌ Test 3/5: Performance too slow (${RESPONSE_TIME}s)"
            fi
            
            # Test 4: Database connectivity
            ((TESTS_TOTAL++))
            if docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd \
              -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" \
              -Q "SELECT COUNT(*) FROM sys.databases WHERE name='CESIZenDB'" > /dev/null 2>&1; then
              echo "✅ Test 4/5: Database connectivity"
              ((TESTS_PASSED++))
            else
              echo "❌ Test 4/5: Database connectivity failed"
            fi
            
            # Test 5: Container health
            ((TESTS_TOTAL++))
            if docker ps | grep cesizen_app | grep -q "Up"; then
              echo "✅ Test 5/5: Container health"
              ((TESTS_PASSED++))
            else
              echo "❌ Test 5/5: Container not healthy"
            fi
            
            # Résultats
            echo "📋 Test Results: $TESTS_PASSED/$TESTS_TOTAL passed"
            
            if [ $TESTS_PASSED -eq $TESTS_TOTAL ]; then
              echo "🎉 All post-deployment tests passed!"
            else
              echo "⚠️ Some tests failed. Deployment might have issues."
              if [ $TESTS_PASSED -lt 3 ]; then
                echo "❌ Critical failure: Less than 60% tests passed"
                exit 1
              fi
            fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 CESIZen Enhanced Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production (4GB RAM VM - Optimized)" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: Blue-Green Canary Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: SQL Server 2022 Express (2GB allocated)" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: ASP.NET Core (800MB allocated)" >> $GITHUB_STEP_SUMMARY
          echo "- **Memory Management**: Optimized for 4GB total" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY