name: 02-2 - Deploy Job

on:
  workflow_call

env:
  REGISTRY: ghcr.io
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE_NAME_LOWER
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Database Backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            # Backup base de données CESIZen
            BACKUP_FILE="cesizen_backup_$(date +%Y%m%d_%H%M%S).bak"
            docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd \
              -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" \
              -Q "BACKUP DATABASE [CESIZenDB] TO DISK = '/var/opt/mssql/data/$BACKUP_FILE'" || echo "⚠️ Database backup failed - continuing deployment"
            
            echo "✅ Database backup created: $BACKUP_FILE"

      - name: Update Compose File
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          source: "./docker-compose.yml"
          target: "."

      - name: Setup Infrastructure and Canary Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            # Login Docker Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Export environment variables for docker-compose
            export GITHUB_REPOSITORY="${{ env.IMAGE_NAME_LOWER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            
            # Créer le réseau s'il n'existe pas
            docker network create cesizen-network --driver bridge || echo "ℹ️ Network already exists"
            
            # S'assurer que la base de données fonctionne
            echo "🔍 Checking if database is running..."
            if ! docker ps | grep cesizen_database; then
              echo "🚀 Starting database..."
              docker compose up -d cesizen-database
              echo "⏳ Waiting for database to be ready..."
              sleep 30
            fi
            
            # Pull nouvelle image
            NEW_IMAGE="ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}"
            echo "📥 Pulling new image: $NEW_IMAGE"
            docker pull $NEW_IMAGE
            
            # Déploiement Canary (10% du trafic)
            echo "🚀 Starting Canary Deployment (10% traffic)"
            
            # Arrêter et supprimer l'ancien canary s'il existe
            docker stop cesizen-canary 2>/dev/null || true
            docker rm cesizen-canary 2>/dev/null || true
            
            # Créer conteneur canary
            docker run -d \
              --name cesizen-canary \
              --network cesizen-network \
              -p 8081:8080 \
              -e ASPNETCORE_ENVIRONMENT=Production \
              -e "ConnectionStrings__DefaultConnection=Server=cesizen-database;Database=CESIZenDB;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;" \
              $NEW_IMAGE
            
            # Attendre que le canary démarre
            echo "⏳ Waiting for canary to start..."
            sleep 30
            
            # Vérifier que le conteneur fonctionne
            echo "🔍 Checking canary container status..."
            docker ps | grep cesizen-canary || echo "⚠️ Canary container not running"
            docker logs cesizen-canary --tail 20 || echo "⚠️ Cannot get canary logs"

            # Monitoring pendant 3 minutes (réduit pour les tests)
            echo "📊 Monitoring canary for 3 minutes..."
            
            CANARY_HEALTHY=true
            for i in {1..3}; do
              echo "🩺 Health check attempt $i/3..."
              
              # Vérifier d'abord que le conteneur fonctionne
              if ! docker ps | grep cesizen-canary > /dev/null; then
                echo "❌ Canary container is not running!"
                docker logs cesizen-canary --tail 10
                CANARY_HEALTHY=false
                break
              fi
              
              # Health check simple (on teste la page d'accueil)
              if curl -f -m 10 http://localhost:8081/ > /dev/null 2>&1; then
                echo "✅ Minute $i: Canary healthy"
              else
                echo "❌ Minute $i: Canary unhealthy"
                echo "🔍 Debugging canary..."
                docker logs cesizen-canary --tail 10
                
                # Essayer encore une fois avec plus de détails
                echo "🔍 Testing with verbose output..."
                curl -v http://localhost:8081/ || true
                
                if [ $i -eq 3 ]; then
                  echo "❌ Final attempt failed - Rolling back"
                  docker stop cesizen-canary && docker rm cesizen-canary
                  CANARY_HEALTHY=false
                  break
                fi
              fi
              
              # Test de performance
              RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" -m 10 http://localhost:8081/ 2>/dev/null || echo "999")
              echo "⚡ Response time: ${RESPONSE_TIME}s"
              
              # Vérifier la performance (< 3 secondes)
              if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l 2>/dev/null || echo "0") )); then
                echo "⚠️ Response time is slow: ${RESPONSE_TIME}s"
              fi
              
              if [ $i -lt 3 ]; then
                echo "⏳ Waiting 60 seconds before next check..."
                sleep 60
              fi
            done

            if [ "$CANARY_HEALTHY" = true ]; then
              # Si succès, déploiement complet
              echo "🎯 Canary successful, proceeding with full deployment"
              
              # Arrêter l'ancienne version
              docker stop cesizen-app 2>/dev/null || true
              docker rm cesizen-app 2>/dev/null || true
              
              # Déployer la nouvelle version
              docker run -d \
                --name cesizen-app \
                --network cesizen-network \
                -p 8080:8080 \
                -e ASPNETCORE_ENVIRONMENT=Production \
                -e "ConnectionStrings__DefaultConnection=Server=cesizen-database;Database=CESIZenDB;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;" \
                $NEW_IMAGE
              
              # Nettoyer le conteneur canary
              docker stop cesizen-canary && docker rm cesizen-canary
              
              # Vérification finale
              echo "🔍 Final health check..."
              sleep 10
              
              if curl -f http://localhost:8080/ > /dev/null 2>&1; then
                echo "✅ Deployment successful!"
              else
                echo "❌ Deployment failed!"
                exit 1
              fi
              
              # Nettoyer les anciennes images
              docker image prune -f
              
              echo "🚀 CESIZen deployment completed successfully!"
            else
              echo "❌ Canary deployment failed!"
              exit 1
            fi

      - name: Post-Deployment Tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            echo "🧪 Running post-deployment tests..."
            
            # Test de base
            curl -f http://localhost:8080/ || (echo "❌ Homepage test failed" && exit 1)
            
            # Test des endpoints spécifiques
            curl -f http://localhost:8080/Home/Privacy || (echo "❌ Privacy page test failed" && exit 1)
            
            # Test de performance
            RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:8080/ 2>/dev/null || echo "999")
            echo "⚡ Production response time: ${RESPONSE_TIME}s"
            
            if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l 2>/dev/null || echo "0") )); then
              echo "⚠️ Production response time is slow: ${RESPONSE_TIME}s"
            else
              echo "✅ Performance test passed"
            fi
            
            echo "✅ All post-deployment tests passed!"

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 CESIZen Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: Canary Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY