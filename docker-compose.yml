- name: Canary Deployment
  uses: appleboy/ssh-action@v1.0.3
  with:
    host: ${{ secrets.AZURE_HOST }}
    username: ${{ secrets.AZURE_LOGIN }}
    port: ${{ secrets.AZURE_PORT }}
    password: ${{ secrets.AZURE_PWD }}
    script: |
      # Login Docker Registry
      echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
      # Export variables for docker-compose
      export GITHUB_REPOSITORY="${{ env.IMAGE_NAME_LOWER }}"
      export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
      
      # Pull nouvelle image
      NEW_IMAGE="ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}"
      docker pull $NEW_IMAGE
      
      # Créer un service canary temporaire
      cat > docker-compose.canary.yml << EOF
      services:
        cesizen-canary:
          container_name: cesizen_canary
          image: ${NEW_IMAGE}
          depends_on:
            cesizen-database:
              condition: service_healthy
          environment:
            ASPNETCORE_ENVIRONMENT: "Production"
            ConnectionStrings__DefaultConnection: "Server=cesizen-database;Database=CESIZenDB;User Id=sa;Password=${DB_PASSWORD};TrustServerCertificate=true;"
          ports:
            - "8081:8080"
          networks:
            - cesizen-network
          restart: "no"
      
      networks:
        cesizen-network:
          external: true
      EOF
      
      # Démarrer le canary
      docker-compose -f docker-compose.yml -f docker-compose.canary.yml up -d cesizen-canary
      
      # ... tests et monitoring ...
      
      # Si succès, déployer en production
      docker-compose -f docker-compose.yml up -d cesizen-app
      
      # Nettoyer le canary
      docker-compose -f docker-compose.canary.yml down