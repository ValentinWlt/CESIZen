name: 02-2 - Deploy Job 

on:
  workflow_call

env:
  REGISTRY: ghcr.io
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE_NAME_LOWER
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Database Backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            # Backup base de donn√©es CESIZen si elle existe
            if docker ps | grep cesizen_database > /dev/null; then
              BACKUP_FILE="cesizen_backup_$(date +%Y%m%d_%H%M%S).bak"
              docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd \
                -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" \
                -Q "BACKUP DATABASE [CESIZenDB] TO DISK = '/var/opt/mssql/data/$BACKUP_FILE'" || echo "‚ö†Ô∏è Database backup failed - continuing deployment"
              echo "‚úÖ Database backup created: $BACKUP_FILE"
            else
              echo "‚ÑπÔ∏è No existing database to backup"
            fi

      - name: Update Compose File
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          source: "./docker-compose.yml"
          target: "."

      - name: Setup Infrastructure and Canary Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            # Login Docker Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Export environment variables for docker-compose
            export GITHUB_REPOSITORY="${{ env.IMAGE_NAME_LOWER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            
            # V√©rifier les ressources syst√®me
            echo "üîç System Resources Check:"
            echo "Memory: $(free -h | grep Mem)"
            echo "Disk: $(df -h / | tail -1)"
            echo ""
            
            # Nettoyage pr√©ventif pour optimiser la m√©moire
            echo "üßπ Cleaning up to optimize memory usage..."
            docker system prune -f 2>/dev/null || true
            
            # Cr√©er le r√©seau s'il n'existe pas
            docker network create cesizen-network --driver bridge || echo "‚ÑπÔ∏è Network already exists"
            
            # S'assurer que la base de donn√©es fonctionne
            echo "üîç Checking if database is running..."
            if ! docker ps | grep cesizen_database; then
              echo "üöÄ Starting database with optimized settings for 2GB RAM..."
              
              # D√©marrer SQL Server avec configuration optimis√©e pour 2GB RAM
              docker run -d \
                --name cesizen_database \
                --network cesizen-network \
                -p 1433:1433 \
                -e SA_PASSWORD="${{ secrets.DB_PASSWORD }}" \
                -e ACCEPT_EULA=Y \
                -e MSSQL_PID=Express \
                --memory="1.2g" \
                --memory-swap="1.5g" \
                -v cesizen_sqldata:/var/opt/mssql/data \
                mcr.microsoft.com/mssql/server:2022-latest
              
              echo "‚è≥ Waiting for database to be ready (optimized for 2GB)..."
              sleep 60  # Temps d'attente raisonnable pour 2GB
              
              # V√©rifier que la base est pr√™te
              DB_READY=false
              for i in {1..15}; do  # 15 tentatives max
                echo "ü©∫ Database health check attempt $i/15..."
                
                # V√©rifier d'abord que le conteneur fonctionne
                if ! docker ps | grep cesizen_database > /dev/null; then
                  echo "‚ùå Database container stopped unexpectedly!"
                  docker logs cesizen_database --tail 20
                  break
                fi
                
                # Tester la connexion SQL Server
                if docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" -Q "SELECT 1" > /dev/null 2>&1; then
                  echo "‚úÖ Database is ready!"
                  DB_READY=true
                  break
                elif [ $i -eq 15 ]; then
                  echo "‚ùå Database failed to start after 15 attempts"
                  echo "üîç Container logs:"
                  docker logs cesizen_database --tail 30
                  echo "üîç System resources:"
                  free -h
                  echo "üîç Docker stats:"
                  docker stats --no-stream cesizen_database || true
                  exit 1
                else
                  echo "‚è≥ Waiting for database... attempt $i/15 (10s delay)"
                  sleep 10
                fi
              done
              
              if [ "$DB_READY" != "true" ]; then
                echo "‚ùå Database startup failed"
                exit 1
              fi
              
            else
              echo "‚úÖ Database is already running"
              # Test rapide de sant√© de la DB existante
              if ! docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" -Q "SELECT 1" > /dev/null 2>&1; then
                echo "‚ö†Ô∏è Existing database not responding, restarting..."
                docker restart cesizen_database
                sleep 45
                
                # Re-test apr√®s restart
                if ! docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" -Q "SELECT 1" > /dev/null 2>&1; then
                  echo "‚ùå Database still not responding after restart"
                  exit 1
                fi
              fi
            fi
            
            # Pull nouvelle image
            NEW_IMAGE="ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}"
            echo "üì• Pulling new image: $NEW_IMAGE"
            docker pull $NEW_IMAGE
            
            # D√©ploiement Canary avec gestion optimis√©e pour 2GB RAM
            echo "üöÄ Starting Canary Deployment (10% traffic)"
            
            # Arr√™ter et supprimer l'ancien canary s'il existe
            docker stop cesizen-canary 2>/dev/null || true
            docker rm cesizen-canary 2>/dev/null || true
            
            # Cr√©er conteneur canary avec limites m√©moire appropri√©es
            docker run -d \
              --name cesizen-canary \
              --network cesizen-network \
              -p 8081:8080 \
              --memory="300m" \
              --memory-swap="400m" \
              -e ASPNETCORE_ENVIRONMENT=Production \
              -e "ConnectionStrings__DefaultConnection=Server=cesizen_database;Database=CESIZenDB;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;" \
              $NEW_IMAGE
            
            # Attendre que le canary d√©marre
            echo "‚è≥ Waiting for canary to start..."
            sleep 30
            
            # V√©rifier que le conteneur fonctionne
            echo "üîç Checking canary container status..."
            if docker ps | grep cesizen-canary > /dev/null; then
              echo "‚úÖ Canary container is running"
              docker logs cesizen-canary --tail 10
            else
              echo "‚ùå Canary container not running"
              docker logs cesizen-canary --tail 20 || echo "‚ö†Ô∏è Cannot get canary logs"
              echo "‚ùå Canary deployment failed!"
              exit 1
            fi

            # Monitoring canary avec tests complets
            echo "üìä Monitoring canary for 3 minutes..."
            
            CANARY_HEALTHY=true
            for i in {1..3}; do
              echo "ü©∫ Health check attempt $i/3..."
              
              # V√©rifier d'abord que le conteneur fonctionne
              if ! docker ps | grep cesizen-canary > /dev/null; then
                echo "‚ùå Canary container is not running!"
                docker logs cesizen-canary --tail 10
                CANARY_HEALTHY=false
                break
              fi
              
              # Health check avec retry
              HEALTH_OK=false
              for retry in {1..3}; do
                if curl -f -m 10 http://localhost:8081/ > /dev/null 2>&1; then
                  HEALTH_OK=true
                  break
                else
                  echo "üîÑ Health check retry $retry/3..."
                  sleep 5
                fi
              done
              
              if [ "$HEALTH_OK" = "true" ]; then
                echo "‚úÖ Minute $i: Canary healthy"
                
                # Test de performance
                RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" -m 10 http://localhost:8081/ 2>/dev/null || echo "999")
                echo "‚ö° Response time: ${RESPONSE_TIME}s"
                
                # V√©rifier la performance (< 3 secondes pour 2GB RAM)
                if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l 2>/dev/null || echo "0") )); then
                  echo "‚ö†Ô∏è Response time is slow: ${RESPONSE_TIME}s"
                fi
                
              else
                echo "‚ùå Minute $i: Canary unhealthy"
                echo "üîç Debugging canary..."
                docker logs cesizen-canary --tail 15
                
                if [ $i -eq 3 ]; then
                  echo "‚ùå Final attempt failed - Rolling back"
                  docker stop cesizen-canary && docker rm cesizen-canary
                  CANARY_HEALTHY=false
                  break
                fi
              fi
              
              if [ $i -lt 3 ]; then
                echo "‚è≥ Waiting 60 seconds before next check..."
                sleep 60
              fi
            done

            if [ "$CANARY_HEALTHY" = true ]; then
              # Si succ√®s, d√©ploiement complet
              echo "üéØ Canary successful, proceeding with full deployment"
              
              # Arr√™ter l'ancienne version
              docker stop cesizen-app 2>/dev/null || true
              docker rm cesizen-app 2>/dev/null || true
              
              # Arr√™ter le canary temporairement pour lib√©rer un peu de m√©moire
              docker stop cesizen-canary
              
              # D√©ployer la nouvelle version
              docker run -d \
                --name cesizen-app \
                --network cesizen-network \
                -p 8080:8080 \
                --memory="300m" \
                --memory-swap="400m" \
                -e ASPNETCORE_ENVIRONMENT=Production \
                -e "ConnectionStrings__DefaultConnection=Server=cesizen_database;Database=CESIZenDB;User Id=sa;Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;" \
                $NEW_IMAGE
              
              # Nettoyer le conteneur canary
              docker rm cesizen-canary
              
              # V√©rification finale
              echo "üîç Final health check..."
              sleep 20
              
              # Test de sant√© avec retry
              FINAL_HEALTH=false
              for retry in {1..5}; do
                if curl -f -m 10 http://localhost:8080/ > /dev/null 2>&1; then
                  FINAL_HEALTH=true
                  break
                else
                  echo "üîÑ Final health check retry $retry/5..."
                  sleep 10
                fi
              done
              
              if [ "$FINAL_HEALTH" = "true" ]; then
                echo "‚úÖ Deployment successful!"
              else
                echo "‚ùå Deployment failed!"
                echo "üîç Application logs:"
                docker logs cesizen-app --tail 20
                exit 1
              fi
              
              # Nettoyer les anciennes images
              docker image prune -f
              
              echo "üöÄ CESIZen deployment completed successfully!"
              echo "üìä Final system status:"
              free -h
              docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" || true
            else
              echo "‚ùå Canary deployment failed!"
              exit 1
            fi

      - name: Post-Deployment Tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_LOGIN }}
          port: ${{ secrets.AZURE_PORT }}
          password: ${{ secrets.AZURE_PWD }}
          script: |
            echo "üß™ Running post-deployment tests..."
            
            # Test de base
            if curl -f -m 15 http://localhost:8080/ > /dev/null 2>&1; then
              echo "‚úÖ Homepage test passed"
            else
              echo "‚ùå Homepage test failed"
              docker logs cesizen-app --tail 10
              exit 1
            fi
            
            # Test des endpoints sp√©cifiques
            if curl -f -m 10 http://localhost:8080/Home/Privacy > /dev/null 2>&1; then
              echo "‚úÖ Privacy page test passed"
            else
              echo "‚ö†Ô∏è Privacy page test failed (non-critical)"
            fi
            
            # Test de performance
            RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" -m 15 http://localhost:8080/ 2>/dev/null || echo "999")
            echo "‚ö° Production response time: ${RESPONSE_TIME}s"
            
            if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l 2>/dev/null || echo "0") )); then
              echo "‚ö†Ô∏è Response time is slow: ${RESPONSE_TIME}s"
            else
              echo "‚úÖ Performance test passed"
            fi
            
            # Test de la base de donn√©es
            if docker exec cesizen_database /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ secrets.DB_PASSWORD }}" -Q "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES" > /dev/null 2>&1; then
              echo "‚úÖ Database connectivity test passed"
            else
              echo "‚ö†Ô∏è Database connectivity test failed"
            fi
            
            echo "‚úÖ All critical post-deployment tests passed!"

      - name: Deployment Summary
        if: always()
        run: |
          echo "## üöÄ CESIZen Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production (2GB RAM VM)" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: Canary Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ghcr.io/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: SQL Server Express" >> $GITHUB_STEP_SUMMARY
          echo "- **Memory Configuration**: Optimized for 2GB" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Time**: $(date)" >> $GITHUB_STEP_SUMMARY