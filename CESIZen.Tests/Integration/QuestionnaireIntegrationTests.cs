using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using CesiZen.Data;
using CESIZen.Models;
using System.Net;
using System.Text;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection.Extensions;

namespace CESIZen.Tests.Integration
{
    [TestClass]
    [TestCategory("Integration")]
    public class QuestionnaireIntegrationTests
    {
        private WebApplicationFactory<Program> _factory;
        private HttpClient _client;

        [TestInitialize]
        public void TestInitialize()
        {
            _factory = new WebApplicationFactory<Program>()
                .WithWebHostBuilder(builder =>
                {
                    builder.ConfigureServices(services =>
                    {
                        // Remplacer la vraie base de donn√©es par une base en m√©moire pour les tests
                        var descriptor = services.SingleOrDefault(
                            d => d.ServiceType == typeof(DbContextOptions<CesiZenDbContext>));
                        if (descriptor != null)
                            services.Remove(descriptor);

                        services.AddDbContext<CesiZenDbContext>(options =>
                            options.UseInMemoryDatabase($"IntegrationTestDb_{Guid.NewGuid()}"));

                        // Configuration sp√©cifique pour les tests
                        services.Configure<IdentityOptions>(options =>
                        {
                            // Assouplir les r√®gles de mot de passe pour les tests
                            options.Password.RequireDigit = false;
                            options.Password.RequiredLength = 4;
                            options.Password.RequireNonAlphanumeric = false;
                            options.Password.RequireUppercase = false;
                            options.Password.RequireLowercase = false;
                        });
                    });

                    builder.UseEnvironment("Testing");
                    
                    // D√©sactiver HTTPS redirect pour les tests
                    builder.ConfigureServices(services =>
                    {
                        services.PostConfigure<Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionOptions>(options =>
                        {
                            options.HttpsPort = null;
                        });
                    });
                });

            _client = _factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [TestCleanup]
        public void TestCleanup()
        {
            _client?.Dispose();
            _factory?.Dispose();
        }

        /// <summary>
        /// Test d'int√©gration : Navigation et s√©curit√© de l'application
        /// </summary>
        [TestMethod]
        [TestCategory("Integration")]
        public async Task ApplicationNavigation_And_Security_ShouldWork()
        {
            Console.WriteLine("üîÑ Test d'int√©gration: Navigation et s√©curit√©...");

            // === √âTAPE 1: Test d'acc√®s aux pages publiques ===
            Console.WriteLine("üìÑ Test 1: Acc√®s aux pages publiques...");
            
            var homeResponse = await _client.GetAsync("/");
            Assert.IsTrue(homeResponse.IsSuccessStatusCode, 
                $"La page d'accueil devrait √™tre accessible. Statut: {homeResponse.StatusCode}");
            Console.WriteLine($"‚úÖ Page d'accueil: {homeResponse.StatusCode}");

            var registerPageResponse = await _client.GetAsync("/Account/Register");
            Assert.IsTrue(registerPageResponse.IsSuccessStatusCode, 
                $"La page d'inscription devrait √™tre accessible. Statut: {registerPageResponse.StatusCode}");
            Console.WriteLine($"‚úÖ Page d'inscription: {registerPageResponse.StatusCode}");

            var loginPageResponse = await _client.GetAsync("/Account/Login");
            Assert.IsTrue(loginPageResponse.IsSuccessStatusCode, 
                $"La page de connexion devrait √™tre accessible. Statut: {loginPageResponse.StatusCode}");
            Console.WriteLine($"‚úÖ Page de connexion: {loginPageResponse.StatusCode}");

            // === √âTAPE 2: Test de s√©curit√© - Acc√®s aux pages prot√©g√©es ===
            Console.WriteLine("üîí Test 2: S√©curit√© des pages prot√©g√©es...");
            
            var questionnaireUrl = "/Utilisateur/QuestionnaireUtilisateur/Index";
            var protectedResponse = await _client.GetAsync(questionnaireUrl);
            
            Console.WriteLine($"üìä Acc√®s questionnaire sans auth: {protectedResponse.StatusCode}");
            
            // V√©rifier que l'acc√®s non autoris√© est correctement g√©r√©
            bool isSecurityWorking = protectedResponse.StatusCode == HttpStatusCode.Redirect || 
                                   protectedResponse.StatusCode == HttpStatusCode.Unauthorized ||
                                   protectedResponse.StatusCode == HttpStatusCode.Found;

            if (protectedResponse.StatusCode == HttpStatusCode.Redirect)
            {
                var location = protectedResponse.Headers.Location?.ToString();
                Console.WriteLine($"üìç Redirection vers: {location}");
                
                bool isAuthRedirect = location?.ToLower().Contains("account") == true || 
                                     location?.ToLower().Contains("login") == true ||
                                     location?.Contains("ReturnUrl") == true;
                
                Assert.IsTrue(isAuthRedirect, 
                    $"Devrait rediriger vers authentification. Location: {location}");
                Console.WriteLine("‚úÖ Redirection d'authentification correcte");
            }
            else
            {
                Assert.IsTrue(isSecurityWorking,
                    $"L'acc√®s prot√©g√© devrait √™tre s√©curis√©. Statut: {protectedResponse.StatusCode}");
                Console.WriteLine($"‚úÖ S√©curit√© valid√©e: {protectedResponse.StatusCode}");
            }

            // === √âTAPE 3: Test de l'acc√®s aux formulaires ===
            Console.WriteLine("üìù Test 3: Acc√®s aux formulaires...");
            
            var registerContent = await registerPageResponse.Content.ReadAsStringAsync();
            Assert.IsTrue(registerContent.Contains("Email") || registerContent.Contains("inscription"),
                "La page d'inscription devrait contenir un formulaire");
            Console.WriteLine("‚úÖ Formulaire d'inscription pr√©sent");

            var loginContent = await loginPageResponse.Content.ReadAsStringAsync();
            Assert.IsTrue(loginContent.Contains("Email") || loginContent.Contains("Password") || loginContent.Contains("connexion"),
                "La page de connexion devrait contenir un formulaire");
            Console.WriteLine("‚úÖ Formulaire de connexion pr√©sent");

            // === √âTAPE 4: Test de la base de donn√©es ===
            Console.WriteLine("üóÑÔ∏è Test 4: Initialisation de la base de donn√©es...");
            
            using var scope = _factory.Services.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<CesiZenDbContext>();
            
            // S'assurer que la base de donn√©es est cr√©√©e
            await context.Database.EnsureCreatedAsync();
            
            // Ajouter des donn√©es de test
            if (!context.Questionnaires.Any())
            {
                context.Questionnaires.AddRange(
                    new QuestionnaireStress { Id = 1, Libelle = "Stress au travail", Valeur = 5 },
                    new QuestionnaireStress { Id = 2, Libelle = "Stress familial", Valeur = 3 },
                    new QuestionnaireStress { Id = 3, Libelle = "Stress financier", Valeur = 7 }
                );
                await context.SaveChangesAsync();
                Console.WriteLine("‚úÖ Donn√©es de test ajout√©es");
            }

            var questionnaireCount = await context.Questionnaires.CountAsync();
            Assert.IsTrue(questionnaireCount >= 3, "Les questionnaires de test devraient √™tre pr√©sents");
            Console.WriteLine($"‚úÖ Questionnaires en base: {questionnaireCount}");

            Console.WriteLine("üéâ Test d'int√©gration termin√© avec succ√®s !");
        }

        /// <summary>
        /// Test sp√©cifique : Validation des formulaires d'authentification
        /// </summary>
        [TestMethod]
        [TestCategory("Integration")]
        public async Task AuthenticationForms_ShouldHaveCorrectStructure()
        {
            Console.WriteLine("üîÑ Test validation: Structure des formulaires d'authentification...");

            // === TEST FORMULAIRE D'INSCRIPTION ===
            var registerPage = await _client.GetAsync("/Account/Register");
            Assert.IsTrue(registerPage.IsSuccessStatusCode, "Page d'inscription accessible");
            
            var registerContent = await registerPage.Content.ReadAsStringAsync();
            
            // V√©rifier la pr√©sence des champs essentiels
            Assert.IsTrue(registerContent.Contains("Email"), "Champ Email pr√©sent");
            Assert.IsTrue(registerContent.Contains("Password"), "Champ Password pr√©sent");
            Assert.IsTrue(registerContent.Contains("Nom") || registerContent.Contains("nom"), "Champ Nom pr√©sent");
            Assert.IsTrue(registerContent.Contains("Prenom") || registerContent.Contains("prenom"), "Champ Pr√©nom pr√©sent");
            
            // V√©rifier la pr√©sence du token anti-forgery
            bool hasAntiForgeryToken = registerContent.Contains("__RequestVerificationToken");
            Console.WriteLine($"üìã Token anti-forgery pr√©sent: {hasAntiForgeryToken}");
            
            Console.WriteLine("‚úÖ Structure du formulaire d'inscription valid√©e");

            // === TEST FORMULAIRE DE CONNEXION ===
            var loginPage = await _client.GetAsync("/Account/Login");
            Assert.IsTrue(loginPage.IsSuccessStatusCode, "Page de connexion accessible");
            
            var loginContent = await loginPage.Content.ReadAsStringAsync();
            
            // V√©rifier la pr√©sence des champs essentiels
            Assert.IsTrue(loginContent.Contains("Email"), "Champ Email pr√©sent dans login");
            Assert.IsTrue(loginContent.Contains("Password"), "Champ Password pr√©sent dans login");
            
            bool hasLoginAntiForgeryToken = loginContent.Contains("__RequestVerificationToken");
            Console.WriteLine($"üìã Token anti-forgery login pr√©sent: {hasLoginAntiForgeryToken}");
            
            Console.WriteLine("‚úÖ Structure du formulaire de connexion valid√©e");

            // === TEST TENTATIVE DE SOUMISSION (sans validation compl√®te) ===
            Console.WriteLine("üìù Test tentative soumission formulaire vide...");
            
            var emptyFormData = new List<KeyValuePair<string, string>>();
            var emptyFormContent = new FormUrlEncodedContent(emptyFormData);
            
            var emptySubmitResponse = await _client.PostAsync("/Account/Register", emptyFormContent);
            Console.WriteLine($"üìä Soumission formulaire vide: {emptySubmitResponse.StatusCode}");
            
            // Une soumission vide devrait soit √©chouer (BadRequest) soit retourner la page avec erreurs
            bool isExpectedFailure = !emptySubmitResponse.IsSuccessStatusCode || 
                                    emptySubmitResponse.StatusCode == HttpStatusCode.BadRequest;
            
            Console.WriteLine($"‚úÖ Validation formulaire fonctionne: {isExpectedFailure}");

            Console.WriteLine("üéâ Validation des formulaires termin√©e avec succ√®s !");
        }

        /// <summary>
        /// Test de performance et disponibilit√©
        /// </summary>
        [TestMethod]
        [TestCategory("Integration")]
        public async Task ApplicationPerformance_ShouldBeReasonable()
        {
            Console.WriteLine("üîÑ Test performance: Temps de r√©ponse des pages...");

            var stopwatch = System.Diagnostics.Stopwatch.StartNew();

            // Test page d'accueil
            stopwatch.Restart();
            var homeResponse = await _client.GetAsync("/");
            stopwatch.Stop();
            
            Assert.IsTrue(homeResponse.IsSuccessStatusCode, "Page d'accueil accessible");
            Assert.IsTrue(stopwatch.ElapsedMilliseconds < 5000, 
                $"Page d'accueil devrait r√©pondre en moins de 5s. Temps: {stopwatch.ElapsedMilliseconds}ms");
            Console.WriteLine($"‚úÖ Page d'accueil: {stopwatch.ElapsedMilliseconds}ms");

            // Test page d'inscription
            stopwatch.Restart();
            var registerResponse = await _client.GetAsync("/Account/Register");
            stopwatch.Stop();
            
            Assert.IsTrue(registerResponse.IsSuccessStatusCode, "Page d'inscription accessible");
            Assert.IsTrue(stopwatch.ElapsedMilliseconds < 5000, 
                $"Page d'inscription devrait r√©pondre en moins de 5s. Temps: {stopwatch.ElapsedMilliseconds}ms");
            Console.WriteLine($"‚úÖ Page d'inscription: {stopwatch.ElapsedMilliseconds}ms");

            // Test page de connexion
            stopwatch.Restart();
            var loginResponse = await _client.GetAsync("/Account/Login");
            stopwatch.Stop();
            
            Assert.IsTrue(loginResponse.IsSuccessStatusCode, "Page de connexion accessible");
            Assert.IsTrue(stopwatch.ElapsedMilliseconds < 5000, 
                $"Page de connexion devrait r√©pondre en moins de 5s. Temps: {stopwatch.ElapsedMilliseconds}ms");
            Console.WriteLine($"‚úÖ Page de connexion: {stopwatch.ElapsedMilliseconds}ms");

            Console.WriteLine("üéâ Tests de performance termin√©s avec succ√®s !");
        }

        #region M√©thodes utilitaires

        private static string ExtractAntiForgeryToken(string html)
        {
            try
            {
                var tokenStart = html.IndexOf("__RequestVerificationToken", StringComparison.OrdinalIgnoreCase);
                if (tokenStart == -1) return "";

                var valueStart = html.IndexOf("value=\"", tokenStart, StringComparison.OrdinalIgnoreCase) + 7;
                if (valueStart <= 6) return "";

                var valueEnd = html.IndexOf("\"", valueStart, StringComparison.OrdinalIgnoreCase);
                if (valueEnd <= valueStart) return "";

                return html.Substring(valueStart, valueEnd - valueStart);
            }
            catch
            {
                return "";
            }
        }

        #endregion
    }
}